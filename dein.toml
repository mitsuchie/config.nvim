[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'w0ng/vim-hybrid'
hook_add = '''
  augroup init_hybrid
    autocmd!
    autocmd colorscheme hybrid hi LineNr      ctermfg=244 guifg=#979ba1
    autocmd colorscheme hybrid hi CursorLine  ctermbg=237 guibg=#383a3e
    autocmd colorscheme hybrid hi NormalFloat ctermbg=239
  augroup END
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
  augroup myvimrc
    autocmd FileType denite call s:denite_my_settings()
    autocmd FileType denite-filter call s:denite_filter_my_settings()
    autocmd VimEnter * call s:denite_my_settings_on_enter()
  augroup END

  function! s:denite_my_settings() abort
    nnoremap <silent><buffer><expr> <CR> denite#do_map('do_action')
    nnoremap <silent><buffer><expr> <C-o> denite#do_map('do_action', 'tabopen')
    nnoremap <silent><buffer><expr> <C-k> denite#do_map('do_action', 'split')
    nnoremap <silent><buffer><expr> <C-l> denite#do_map('do_action', 'vsplit')
    nnoremap <silent><buffer><expr> q denite#do_map('quit')
    nnoremap <silent><buffer><expr> i denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> a denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <space> denite#do_map('toggle_select').'j'
    nnoremap <silent><buffer><expr> <C-c> denite#do_map('quit')
    inoremap <silent><buffer><expr> <C-c> denite#do_map('quit')
  endfunction

  function! s:denite_filter_my_settings() abort
    inoremap <silent><buffer><expr> <C-c> denite#do_map('quit')
  endfunction

  function! s:denite_my_settings_on_enter() abort
  call denite#custom#option('default', {
    \ 'prompt': '> ',
    \ 'split': 'floating',
    \ 'statusline': v:false,
    \ 'winwidth': float2nr(&columns * 0.85),
    \ 'wincol': float2nr(&columns - (&columns * 0.85)) / 2,
    \ 'winheight': float2nr(&lines * 0.5),
    \ 'winrow': float2nr(&lines - (&lines * 0.5)) - 4,
    \ 'matchers': 'matcher/regexp',
    \ 'start_filter': v:true
    \ })
  endfunction

  nnoremap <silent> ,f :<C-u>Denite file_mru file<CR>
'''

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  let g:lightline = {
  \   'colorscheme': 'wombat',
  \   'subseparator': { 'left': '>', 'right': '<' },
  \   'separator': { 'left': "\ue0b0", 'right': "\ue0b2" }
  \ }
'''

[[plugins]]
repo = 'kana/vim-submode'
hook_add = '''
  let g:submode_timeout = 0
  let g:submode_keep_leaving_key = 1
  let g:submode_keyseqs_to_leave = ['s', 'q']

  function! RegisterSubmode(name, mode, enter, map, key)
    call submode#enter_with(a:name, a:mode, '', a:enter, a:key)
    call submode#map(a:name, a:mode, '', a:map, a:key)
  endfunction

  try
    call RegisterSubmode('resizex', 'n', 'sdl', 'l', '<C-w>>')
    call RegisterSubmode('resizex', 'n', 'sdh', 'h', '<C-w><')
    call RegisterSubmode('resizey', 'n', 'sdj', 'j', '<C-w>+')
    call RegisterSubmode('resizey', 'n', 'sdk', 'k', '<C-w>-')
    call RegisterSubmode('move', 'nv', 'sj', 'j', '5j')
    call RegisterSubmode('move', 'nv', 'sk', 'k', '5k')
  catch
  endtry
'''

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'osyo-manga/vim-brightest'
hook_add = '''
  let g:brightest#highlight = { 'group' : 'BrightestUnderline' }
'''

[[plugins]]
repo = 'AndrewRadev/switch.vim'
hook_add = """
  nnoremap - :<C-u>Switch<CR>
  let g:switch_custom_definitions = [{ '''\(.\{-}\)''': '"\1"', '"\(.\{-}\)"': '''\1'''}]
"""

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"

  let g:quickrun_config = {
  \  '_' : {
  \    'outputter': 'multi:buffer:quickfix',
  \    'outputter/quickfix/open_cmd' : '',
  \    'runner': 'job_on_neovim',
  \    'hook/time/enable': 1,
  \    'hook/to_unix_line/enable': 1,
  \    'hook/santi_pinch/enable': 1,
  \    'hook/output_encode/encoding': 'utf-8',
  \    'hook/quickfix_replate_tempname_to_bufnr/enable_exit': 1,
  \    'hook/quickfix_replate_tempname_to_bufnr/priority_exit': -10,
  \    'hook/close_quickfix/enable_success': 1,
  \    'hook/close_quickfix/enable_hook_loaded': 1,
  \    'hook/qfsigns_update/enable_exit':   1,
  \    'hook/qfsigns_update/priority_exit': 3,
  \  },
  \  'python': {
  \    'command': 'python3'
  \  }
  \}
'''

[[plugins]]
repo = 'osyo-manga/shabadou.vim'
on_source = ['vim-quickrun']
hook_source = '''
  call quickrun#module#register(shabadou#make_quickrun_hook_anim(
  \ 'santi_pinch', ['＼(・ω・＼)　SAN値！', '　(／・ω・)／ピンチ！'], 6), 1)
'''

[[plugins]]
repo = 'ogura01/quickrun-runner-job-on-neovim.nvim'
on_source = ['vim-quickrun']

[[plugins]]
repo = 'ogura01/procon.nvim'
hook_source = '''
  nnoremap <leader>d :<C-u>ProTest<CR>

  " augroup myvimrc
  " autocmd BufWritePost * :<C-u>ProTest<CR>
  " augroup END
'''

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
'''
